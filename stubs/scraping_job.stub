<?php

namespace {{ namespace }};

use App\Models\Category;
use App\Models\Post;
use App\Models\PostCategory;
use App\Models\PostTag;
use App\Models\Tag;
use Exception;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use LarraPress\BlogPoster\Enums\JobStatus;
use LarraPress\BlogPoster\Jobs\ScrapingJob as BaseScrapingJob;
use LarraPress\BlogPoster\Models\ScrapingJob as ScrapingJobModel;

class {{ class }} extends BaseScrapingJob
{
    /**
     * Create a new scraping job instance.
     * Pass the scraping job model which should be processed.
     *
     * @param ScrapingJobModel $scrapingJobModel
     * @return void
     */
    public function __construct(ScrapingJobModel $scrapingJobModel)
    {
        parent::__construct($scrapingJobModel);
    }

    /**
     * Execute the scraping job.
     * For first scrape the posts from third source and assign to the property.
     * Then if posts successfully scraped, insert them into DB.
     *
     * Update scraping job log model.
     *
     * @return void
     */
    public function handle(): bool
    {
        Log::channel(self::$logChannelName)->info("Scraping for ".$this->scrapingJobModel->name." started");

        $postsSuccessfullyScraped = $this->scrapePosts();

        if($postsSuccessfullyScraped)
        {
            $this->insertPosts();

            $this->scrapingJobLog->status = JobStatus::processed();
            $this->scrapingJobLog->scraped_posts_count = $this->scrapedPosts->count();
            $this->scrapingJobLog->save();

            Log::channel(self::$logChannelName)->info("Scraping for ". $this->scrapingJobModel->name ." finished");

            return true;
        }
        else
        {
            return false;
        }
    }

    /**
     * Insert scraped posts into DB.
     *
     * TODO: The autogenerated stuff assumes there are Post, Category, PostCategory, Tag and PostTag models.
     *       All scraped posts documents are in $scrapedPosts property.
     *       Update the autogenerated stuff.
     *
     * @return bool
     */
    protected function insertPosts(): bool
    {
        try{
            foreach ($this->scrapedPosts as $scrapedPost)
            {
                if(Post::whereSourceArticleUrl($scrapedPost['source'])->doesntExist())
                {
                    $post = Post::create([
                        'slug' => Str::slug($scrapedPost['title']),
                        'title' => $scrapedPost['title'],
                        'body' => $scrapedPost['body'],
                        'thumb' => $scrapedPost['image']['thumb']['url'],
                        'featured_image' => $scrapedPost['image']['full']['url'],
                        'source_article_url' => $scrapedPost['source'],
                        'source_url' => $scrapedPost['source_base'],
                    ]);

                    PostCategory::create([
                        'post_id' => $post->id,
                        'category_id' => $this->scrapingJobModel->category_id
                    ]);

                    Category::whereId($this->scrapingJobModel->category_id)->increment('posts_count');

                    foreach ($scrapedPost['tags'] ?? [] as $tag)
                    {
                        $tagModel = Tag::firstOrCreate([
                            'value' => $tag
                        ]);

                        $tagModel->increment('posts_count');

                        PostTag::create([
                            'post_id' => $post->id,
                            'tag_id' => $tagModel->id
                        ]);
                    }
                }
            }

            return true;
        }
        catch (Exception $exception)
        {
            $exceptionData = [
                'code' => $exception->getCode(),
                'message' => $exception->getMessage(),
                'backtrace' => $exception->getTraceAsString(),
            ];

            $this->scrapingJobLog->status = JobStatus::failed();
            $this->scrapingJobLog->log = $exceptionData;
            $this->scrapingJobLog->save();

            Log::channel(self::$logChannelName)->info("Scraping for ".$this->scrapingJobModel->name." failed: " . json_encode($exceptionData));

            return false;
        }
    }
}
